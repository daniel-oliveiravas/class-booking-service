// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bookings "github.com/daniel-oliveiravas/class-booking-service/business/bookings"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BookClass provides a mock function with given fields: ctx, booking
func (_m *Repository) BookClass(ctx context.Context, booking bookings.Booking) (bookings.Booking, error) {
	ret := _m.Called(ctx, booking)

	var r0 bookings.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bookings.Booking) (bookings.Booking, error)); ok {
		return rf(ctx, booking)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bookings.Booking) bookings.Booking); ok {
		r0 = rf(ctx, booking)
	} else {
		r0 = ret.Get(0).(bookings.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bookings.Booking) error); ok {
		r1 = rf(ctx, booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBooking provides a mock function with given fields: ctx, bookingID
func (_m *Repository) DeleteBooking(ctx context.Context, bookingID string) error {
	ret := _m.Called(ctx, bookingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bookingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, bookingID
func (_m *Repository) GetByID(ctx context.Context, bookingID string) (bookings.Booking, error) {
	ret := _m.Called(ctx, bookingID)

	var r0 bookings.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bookings.Booking, error)); ok {
		return rf(ctx, bookingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bookings.Booking); ok {
		r0 = rf(ctx, bookingID)
	} else {
		r0 = ret.Get(0).(bookings.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNotFoundErr provides a mock function with given fields: err
func (_m *Repository) IsNotFoundErr(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListBookings provides a mock function with given fields: ctx, limit, offset
func (_m *Repository) ListBookings(ctx context.Context, limit int, offset int) ([]bookings.Booking, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []bookings.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]bookings.Booking, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []bookings.Booking); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookings.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
