// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	members "github.com/daniel-oliveiravas/class-booking-service/business/members"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, member
func (_m *Repository) AddMember(ctx context.Context, member members.Member) (members.Member, error) {
	ret := _m.Called(ctx, member)

	var r0 members.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, members.Member) (members.Member, error)); ok {
		return rf(ctx, member)
	}
	if rf, ok := ret.Get(0).(func(context.Context, members.Member) members.Member); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Get(0).(members.Member)
	}

	if rf, ok := ret.Get(1).(func(context.Context, members.Member) error); ok {
		r1 = rf(ctx, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMember provides a mock function with given fields: ctx, memberID
func (_m *Repository) DeleteMember(ctx context.Context, memberID string) error {
	ret := _m.Called(ctx, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, memberID
func (_m *Repository) GetByID(ctx context.Context, memberID string) (members.Member, error) {
	ret := _m.Called(ctx, memberID)

	var r0 members.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (members.Member, error)); ok {
		return rf(ctx, memberID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) members.Member); ok {
		r0 = rf(ctx, memberID)
	} else {
		r0 = ret.Get(0).(members.Member)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNotFoundErr provides a mock function with given fields: err
func (_m *Repository) IsNotFoundErr(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListMembers provides a mock function with given fields: ctx, limit, offset
func (_m *Repository) ListMembers(ctx context.Context, limit int, offset int) ([]members.Member, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []members.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]members.Member, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []members.Member); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]members.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: ctx, memberID, updateMember
func (_m *Repository) UpdateMember(ctx context.Context, memberID string, updateMember members.UpdateMember) (members.Member, error) {
	ret := _m.Called(ctx, memberID, updateMember)

	var r0 members.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, members.UpdateMember) (members.Member, error)); ok {
		return rf(ctx, memberID, updateMember)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, members.UpdateMember) members.Member); ok {
		r0 = rf(ctx, memberID, updateMember)
	} else {
		r0 = ret.Get(0).(members.Member)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, members.UpdateMember) error); ok {
		r1 = rf(ctx, memberID, updateMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
